name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Set up Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: Install Python dependencies
      run: |
        cd backend
        poetry install --without dev
        poetry install
    
    - name: Lint Python code
      run: |
        cd backend
        poetry run ruff .
        poetry run black --check .
    
    - name: Run Python tests
      run: |
        cd backend
        poetry run pytest -q
        cd ../backend/worker_service
        poetry run pytest -q
    
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Node dependencies
      run: npm ci --workspaces
    
    - name: Lint JavaScript/TypeScript code
      run: npm run lint --workspaces
    
    - name: Run JavaScript/TypeScript tests
      run: npm run test --workspaces

  docs-generation:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Try to install pandoc
        id: install-pandoc
        continue-on-error: true
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc wkhtmltopdf
          echo "PANDOC_INSTALLED=true" >> $GITHUB_OUTPUT
      
      - name: Build documentation
        if: steps.install-pandoc.outputs.PANDOC_INSTALLED == 'true'
        run: |
          chmod +x docs/build_docs.sh
          make docs
      
      - name: Skip documentation build
        if: steps.install-pandoc.outputs.PANDOC_INSTALLED != 'true'
        run: echo "Skipping documentation build as pandoc is not available"

  demo-test:
    runs-on: ubuntu-latest
    needs: lint-test
    services:
      docker:
        image: docker:24.0-dind
        options: --privileged
        ports:
          - 2375:2375
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Make demo.sh executable
        run: chmod +x demo.sh
      
      - name: Test demo script in dev mode
        run: |
          ./demo.sh dev --reset &
          sleep 60
          curl -s http://localhost:8000/health || { echo "Failed to start backend"; exit 1; }
          docker compose down --remove-orphans
      
      - name: Test demo script in prod mode
        run: |
          ./demo.sh prod &
          sleep 60
          curl -s http://localhost:8000/health || { echo "Failed to start backend"; exit 1; }
          docker compose down --volumes --remove-orphans
